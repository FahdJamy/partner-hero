{"version":3,"sources":["components/Favourites.tsx","components/Picture.tsx","views/Main.tsx","store/actions/picture.ts","App.tsx","serviceWorker.ts","store/reducers/picture.ts","store/actions/sagas/picture.ts","store/actions/sagas/index.ts","store/index.ts","index.tsx"],"names":["Favourites","favourites","onDeleteFavourite","onDeleteAllFavourites","onPictureDetails","useState","show","setShow","handleClose","className","favouritesArr","fav","favourite","push","style","width","marginRight","key","date","title","explanation","slice","onClick","renderFavourites","marginBottom","Button","id","variant","disabled","Object","keys","length","Modal","onHide","Header","closeButton","Title","Body","Footer","Picture","picture","isLoading","setFavorite","onDateSelected","maxDate","disableNext","previousImageHandler","nextImageHandler","src","url","alt","role","type","value","onChange","e","max","App","nowDate","Date","setDate","dispatch","useDispatch","storeData","useSelector","state","setDisableNext","favouritedPictures","localStorage","getItem","JSON","parse","setFavourites","useEffect","apiDate","getFullYear","getMonth","getDate","payload","dateVal","userFavourites","favorites","setItem","stringify","target","nextDate","removeItem","Main","Boolean","window","location","hostname","match","initialState","error","pictureReducer","action","fetchPictures","a","axios","get","data","getPicturesAsync","put","process","call","getPicturesWatcher","takeLatest","rootSaga","all","fork","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"sRAyEeA,EAxDoC,SAAC,GAAgF,IAA9EC,EAA6E,EAA7EA,WAAYC,EAAiE,EAAjEA,kBAAmBC,EAA8C,EAA9CA,sBAAuBC,EAAuB,EAAvBA,iBAAuB,EACzGC,oBAAS,GADgG,mBAC1HC,EAD0H,KACpHC,EADoH,KAsB3HC,EAAc,kBAAMD,GAAQ,IAOlC,OACE,yBAAKE,UAAU,QACb,yBAAKA,UAAU,cA7BM,WACvB,IAAIC,EAAqB,GACzB,GAAIT,EAAY,CAAC,IAAD,WACHU,GACT,IAAMC,EAAYX,EAAWU,GAC7BD,EAAcG,KACZ,yBAAKJ,UAAU,YAAYK,MAAO,CAAEC,MAAO,QAASC,YAAa,QAAUC,IAAKL,EAAUM,MACxF,yBAAKT,UAAU,aACb,wBAAIA,UAAU,cAAcG,EAAUO,OACtC,uBAAGV,UAAU,aAAaG,EAAUQ,YAAYC,MAAM,EAAG,IAAzD,OACA,4BAAQZ,UAAU,8BAA8Ba,QAAS,kBAAMpB,EAAkBU,EAAUM,QAA3F,UACA,4BAAQT,UAAU,0BAA0Ba,QAAS,kBAAMlB,EAAiBQ,EAAUM,QAAtF,YARR,IAAK,IAAMP,KAAOV,EAAa,EAApBU,GAcb,OAAOD,EAaFa,IAEH,yBAAKd,UAAU,gBAAgBK,MAAO,CAAEU,aAAc,SACpD,kBAACC,EAAA,EAAD,CAAQC,GAAG,aAAaC,QAAQ,iBAAiBL,QAZpC,kBAAMf,GAAQ,IAY2CqB,SAA6C,IAAnCC,OAAOC,KAAK7B,GAAY8B,QAAxG,cAEA,kBAACC,EAAA,EAAD,CAAO1B,KAAMA,EAAM2B,OAAQzB,GACzB,kBAACwB,EAAA,EAAME,OAAP,CAAcC,aAAW,GACvB,kBAACH,EAAA,EAAMI,MAAP,uBAEF,kBAACJ,EAAA,EAAMK,KAAP,sEACA,kBAACL,EAAA,EAAMM,OAAP,KACE,kBAACb,EAAA,EAAD,CAAQE,QAAQ,oBAAoBL,QAASd,GAA7C,MAGA,kBAACiB,EAAA,EAAD,CAAQE,QAAQ,iBAAiBL,QAtBxB,WACjBd,IACAL,MAoBQ,YCRGoC,EApCiC,SAAC,GAAmI,IAAjIC,EAAgI,EAAhIA,QAASC,EAAuH,EAAvHA,UAAWC,EAA4G,EAA5GA,YAAaC,EAA+F,EAA/FA,eAAgBC,EAA+E,EAA/EA,QAASC,EAAsE,EAAtEA,YAAaC,EAAyD,EAAzDA,qBAAsBC,EAAmC,EAAnCA,iBAAkB9C,EAAiB,EAAjBA,WAChK,OACE,yBAAKQ,UAAU,aACb,wBAAIA,UAAU,oBAAoB+B,EAAQrB,OAC1C,yBAAKV,UAAU,0BACb,yBAAKA,UAAU,YACb,4BAAQA,UAAU,iCAAiCa,QAAS,kBAAMwB,MAAlE,aAEF,yBAAKrC,UAAU,aACXgC,GAAa,yBAAKO,IAAKR,EAAQS,IAAKC,IAAI,iBAAiBzC,UAAU,cACpEgC,GAAa,yBAAKhC,UAAU,eAC3B,yBAAKA,UAAU,eAAe0C,KAAK,UACjC,0BAAM1C,UAAU,WAAhB,iBAIN,yBAAKA,UAAU,YACb,4BAAQA,UAAU,iCAAiCa,QAAS,kBAAMyB,KAAoBnB,SAAUiB,GAAhG,UAGJ,yBAAKpC,UAAU,oCACb,yBAAKA,UAAU,SAAQ,4BAAQA,UAAU,iCAAiCa,QAAS,kBAAMoB,EAAYF,EAASA,EAAQtB,OAAOU,SAAU3B,EAAWuC,EAAQtB,OACvJjB,EAAWuC,EAAQtB,MAAQ,2BAA4B,kBAG1D,yBAAKT,UAAU,SACb,2BAAO2C,KAAK,OAAOC,MAAOb,EAAQtB,MAAQ,GAAIT,UAAU,eAAe6C,SAAU,SAACC,GAAD,OAAOZ,EAAeY,IAAIC,IAAKZ,MAGpH,yBAAKnC,UAAU,YACZ+B,EAAQpB,eCkDFqC,EArFH,WACV,IAAMC,EAAU,IAAIC,KADJ,EAEQtD,mBAASqD,GAFjB,mBAETxC,EAFS,KAEH0C,EAFG,KAGVC,EAAWC,cACXC,EAAYC,aAAY,SAACC,GAAD,OAAuBA,KAJrC,EAKsB5D,oBAAS,GAL/B,mBAKTwC,EALS,KAKIqB,EALJ,KAMZC,EAAqBC,aAAaC,QAAQ,cAAgBC,KAAKC,MAAMH,aAAaC,QAAQ,eAA2B,GANzG,EAOoBhE,mBAAS8D,GAP7B,mBAOTlE,EAPS,KAOGuE,EAPH,KA4DhB,OALAC,qBAAU,WACR,IAAMC,EAAO,UAAMxD,EAAKyD,cAAX,YAA4BzD,EAAK0D,WAAW,EAA5C,YAAiD1D,EAAK2D,WACnEhB,ECnDK,CACLT,KAAM,iBACN0B,QDiDoB,CAACJ,eACpB,CAACxD,IAGF,yBAAKT,UAAU,aACb,kBAAC,EAAD,CACE+B,QAASuB,EAAUvB,QAAQA,QAC3BI,QA5BE,GAAN,OAAUc,EAAQiB,cAAlB,YAAmCjB,EAAQkB,WAAa,EAAI,GAAK,KAAjE,OAAuElB,EAAQkB,WAA/E,YAA6FlB,EAAQmB,WA6BjGpC,UAAWsB,EAAUvB,QAAQC,UAC7BxC,WAAYA,EACZ4C,YAAaA,EACbH,YAzBc,SAACF,EAAkBuC,GACrC,IAAIC,EAAiBZ,aAAaC,QAAQ,cAAgBC,KAAKC,MAAMH,aAAaC,QAAQ,eAA0B,GAC9GY,EAAS,2BAAOD,GAAP,kBAAwBD,EAAUvC,IACjD4B,aAAac,QAAQ,aAAcZ,KAAKa,UAAUF,IAClDT,EAAcF,KAAKC,MAAMH,aAAaC,QAAQ,iBAsB1C1B,eA9BiB,SAACY,GACtBK,EAAQ,IAAID,KAAKJ,EAAE6B,OAAO/B,SA8BtBN,iBA7DmB,WACvB,IAAMsC,EAAW,IAAI1B,KAAKzC,EAAK0C,QAAQ1C,EAAK2D,UAAY,IACtC,UAAMQ,EAASV,cAAf,YAAgCU,EAAST,WAAzC,YAAuDS,EAASR,aACjE,UAAMnB,EAAQiB,cAAd,YAA+BjB,EAAQkB,WAAvC,YAAqDlB,EAAQmB,YAE5EX,GAAe,GAEjBN,EAAQyB,IAuDJvC,qBArBuB,WAC3Bc,EAAQ,IAAID,KAAKzC,EAAK0C,QAAQ1C,EAAK2D,UAAY,KAC/CX,GAAe,MAqBb,yBAAKzD,UAAU,OACb,kBAAC,EAAD,CACER,WAAYA,EACZC,kBAzDkB,SAACe,GACzB,IAAMgE,EAAYX,KAAKC,MAAMH,aAAaC,QAAQ,sBAC3CY,EAAUhE,GACjBmD,aAAac,QAAQ,aAAcZ,KAAKa,UAAUF,IAClDT,EAAcF,KAAKC,MAAMH,aAAaC,QAAQ,iBAsDxClE,sBAnDsB,WAC5BiE,aAAakB,WAAW,cACxBd,EAAc,KAkDRpE,iBA/CiB,SAACc,GACxB0C,EAAQ,IAAID,KAAKzC,UErCNuC,EANH,WACV,OACE,kBAAC8B,EAAD,OCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCHAC,EAAoC,CACxCpD,WAAW,EACXqD,MAAO,KACPtD,QAAS,IA+BIuD,EA5BQ,WAAwE,IAAvE9B,EAAsE,uDAA9D4B,EAAcG,EAAgD,uCAC5F,OAAQA,EAAO5C,MACb,IAAK,6BACH,OAAO,2BACFa,GADL,IAEExB,WAAW,EACXqD,MAAO,KACPtD,QAAQ,eAAMwD,EAAOlB,WAEzB,IAAK,2BACH,OAAO,2BACFb,GADL,IAEE6B,MAAO,KACPrD,WAAW,EACXD,QAAS,KAEb,IAAK,6BACH,OAAO,2BACFyB,GADL,IAEExB,WAAW,EACXD,QAAS,GACTsD,MAAQE,EAAOlB,UAEnB,QACE,OAAOb,I,kDC1CPgC,EAAa,uCAAG,WAAOhD,GAAP,eAAAiD,EAAA,sEACDC,IAAMC,IAAInD,GADT,cACdoD,EADc,yBAEbA,EAAKA,MAFQ,2CAAH,sDAKNC,EAAgB,UAAG,SAAnBA,EAAmB,8EAE5B,OAFwCxB,EAAZ,EAAYA,QAAZ,kBAEtByB,YAAI,CAACnD,KAAM,6BAFW,OAIf,OADPH,EAHsB,sDAG+BuD,2CAH/B,iBAG0E1B,EAAQJ,SAHlF,SAIT+B,YAAKR,EAAehD,GAJX,OAK5B,OADMoD,EAJsB,iBAKtBE,YAAI,CAACnD,KAAM,6BAA8B0B,QAASuB,IAL5B,gCAO5B,OAP4B,oCAOtBE,YAAI,CAACnD,KAAM,6BAA8B0B,QAAQ,EAAD,KAP1B,qCAAnBwB,EAAmB,kBAWnBI,EAAkB,UAAG,SAArBA,IAAqB,iEAChC,OADgC,SAC1BC,YAAW,iBAAkBL,GADH,oCAArBI,M,WChBYE,GAAV,SAAUA,IAAV,iEACb,OADa,SACPC,YAAI,CACRC,YAAKJ,KAFM,uCCGf,IAAMK,EAAcC,YAAgB,CAClCxE,QAASuD,IAELkB,EAAiBC,cAEVC,EAAQC,YACnBL,EACAM,YAAgBJ,IAGlBA,EAAeK,IAAIV,GAEJO,QCTfI,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,QAGJO,SAASC,eAAe,SL4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,c","file":"static/js/main.163d184d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Button, Modal } from 'react-bootstrap';\n\ninterface Props {\n  favourites: {\n    [k: string]: {\n      date: string,\n      explanation: string,\n      title: string,\n      url: string,\n    }\n  },\n  onDeleteFavourite: Function,\n  onDeleteAllFavourites: Function,\n  onPictureDetails: Function,\n}\n\nconst Favourites: React.FunctionComponent<Props> = ({ favourites, onDeleteFavourite, onDeleteAllFavourites, onPictureDetails }) => {\n  const [show, setShow] = useState(false);\n  const renderFavourites = () => {\n    let favouritesArr: any = [];\n    if (favourites) {\n      for (const fav in favourites) {\n        const favourite = favourites[fav];\n        favouritesArr.push(\n          <div className=\"card mr-4\" style={{ width: '18rem', marginRight: \"10px\" }} key={favourite.date}>\n            <div className=\"card-body\">\n              <h5 className=\"card-title\">{favourite.title}</h5>\n              <p className=\"card-text\">{favourite.explanation.slice(0, 70)}...</p>\n              <button className=\"btn btn-outline-danger mr-4\" onClick={() => onDeleteFavourite(favourite.date)}>Delete</button>\n              <button className=\"btn btn-outline-primary\" onClick={() => onPictureDetails(favourite.date)}>View</button>\n            </div>\n          </div>\n        )\n      }\n    }\n    return favouritesArr;\n  }\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n  const onClickYes = () => {\n    handleClose()\n    onDeleteAllFavourites()\n  }\n\n  return (\n    <div className=\"mt-4\">\n      <div className=\"card-group\">\n        {renderFavourites()}\n      </div>\n      <div className=\"row mt-4 ml-3\" style={{ marginBottom: '20px' }}>\n        <Button id=\"delete-all\" variant=\"outline-danger\" onClick={handleShow} disabled={Object.keys(favourites).length === 0}>Delete all</Button>\n\n        <Modal show={show} onHide={handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>Modal heading</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>Are you sure you want to delete all your favourited pictures?</Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"outline-secondary\" onClick={handleClose}>\n              No\n            </Button>\n            <Button variant=\"outline-danger\" onClick={onClickYes}>\n              Yes\n          </Button>\n          </Modal.Footer>\n        </Modal> \n      </div>\n    </div>\n  )\n}\n\nexport default Favourites;\n","import React from 'react';\n\ninterface Props {\n  picture: {\n    date: string,\n    explanation: string,\n    title: string,\n    url: string,\n  },\n  maxDate: string,\n  favourites: any,\n  isLoading: boolean,\n  disableNext: boolean,\n  setFavorite: Function,\n  onDateSelected: Function,\n  nextImageHandler: Function,\n  previousImageHandler: Function,\n}\n\nconst Picture: React.FunctionComponent<Props> = ({ picture, isLoading, setFavorite, onDateSelected, maxDate, disableNext, previousImageHandler, nextImageHandler, favourites }) => {\n  return (\n    <div className=\"container\">\n      <h3 className=\"text-center mt-3\">{picture.title}</h3>\n      <div className=\"row align-items-center\">\n        <div className=\"col-md-2\">\n          <button className=\"btn btn-outline-primary btn-sm\" onClick={() => previousImageHandler()}>Previous</button>\n        </div>\n        <div className=\"col-md-8\">\n          {!isLoading && <img src={picture.url} alt=\"Pic of the day\" className=\"img-fluid\" />}\n          {isLoading && <div className=\"text-center\">\n            <div className=\"spinner-grow\" role=\"status\">\n              <span className=\"sr-only\">Loading...</span>\n            </div>\n          </div>}\n        </div>\n        <div className=\"col-md-2\">\n          <button className=\"btn btn-outline-primary btn-sm\" onClick={() => nextImageHandler()} disabled={disableNext}>Next</button>\n        </div>\n      </div>\n      <div className=\"row justify-content-between mt-4\">\n        <div className=\"col-4\"><button className=\"btn btn-outline-primary btn-sm\" onClick={() => setFavorite(picture, picture.date)} disabled={favourites[picture.date]}>\n          {favourites[picture.date] ? 'Already set as favourite': 'Set Favourite'}\n        </button>\n        </div>\n        <div className=\"col-4\">\n          <input type=\"date\" value={picture.date || ''} className=\"form-control\" onChange={(e) => onDateSelected(e)} max={maxDate} />\n        </div>\n      </div>\n      <div className=\"row mt-4\">\n        {picture.explanation}\n      </div>\n    </div>\n  );\n}\n\nexport default Picture;\n","import React, { useState, useEffect } from 'react';\nimport Favourites from '../components/Favourites';\nimport Picture from '../components/Picture';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {getPicture} from '../store/actions';\nimport { ROOT_STATE } from '../store';\n\ninterface Picture {\n  date: string,\n  explanation: string,\n  title: string,\n  url: string,\n}\n\nconst App = () => {\n  const nowDate = new Date();\n  const [date, setDate] = useState(nowDate);\n  const dispatch = useDispatch();\n  const storeData = useSelector((state: ROOT_STATE) => state);\n  const [disableNext, setDisableNext] = useState(true);\n  let favouritedPictures = localStorage.getItem(\"favourites\") ? JSON.parse(localStorage.getItem(\"favourites\") as string) : {};\n  const [favourites, setFavourites] = useState(favouritedPictures);\n\n  const nextImageHandler = () => {\n    const nextDate = new Date(date.setDate(date.getDate() + 1));\n    const frmtNextDate = `${nextDate.getFullYear()}-${nextDate.getMonth()}-${nextDate.getDate()}`;\n    const frmtNowDate = `${nowDate.getFullYear()}-${nowDate.getMonth()}-${nowDate.getDate()}`;\n    if (frmtNextDate === frmtNowDate) {\n      setDisableNext(true);\n    }\n    setDate(nextDate);\n  }\n\n  const onDeleteFavourite = (key: string) => {\n    const favorites = JSON.parse(localStorage.getItem(\"favourites\") as string);\n    delete favorites[key];\n    localStorage.setItem('favourites', JSON.stringify(favorites));\n    setFavourites(JSON.parse(localStorage.getItem(\"favourites\") as string));\n  }\n\n  const onDeleteAllFavourites = () => {\n    localStorage.removeItem('favourites');\n    setFavourites({});\n  }\n\n  const onPictureDetails = (date: string) => {\n    setDate(new Date(date));\n  }\n\n  const maxDate = () => {\n    return `${nowDate.getFullYear()}-${nowDate.getMonth() > 9 ? '' : '0'}${nowDate.getMonth()}-${nowDate.getDate()}`;\n  }\n\n  const onDateSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setDate(new Date(e.target.value))\n  }\n\n  const setFavorite = (picture: Picture, dateVal: string) => {\n    let userFavourites = localStorage.getItem(\"favourites\") ? JSON.parse(localStorage.getItem(\"favourites\") as string): {};\n    const favorites = {...userFavourites, [dateVal]: picture};\n    localStorage.setItem('favourites', JSON.stringify(favorites));\n    setFavourites(JSON.parse(localStorage.getItem(\"favourites\") as string));\n  }\n\n  const previousImageHandler = () => {\n    setDate(new Date(date.setDate(date.getDate() - 1)));\n    setDisableNext(false);\n  }\n\n  useEffect(() => {\n    const apiDate = `${date.getFullYear()}-${date.getMonth()+1}-${date.getDate()}`;\n    dispatch(getPicture({apiDate}))\n  }, [date])\n\n  return (\n    <div className=\"container\">\n      <Picture\n        picture={storeData.picture.picture}\n        maxDate={maxDate()}\n        isLoading={storeData.picture.isLoading}\n        favourites={favourites}\n        disableNext={disableNext}\n        setFavorite={setFavorite}\n        onDateSelected={onDateSelected}\n        nextImageHandler={nextImageHandler}\n        previousImageHandler={previousImageHandler}\n      />\n      <div className=\"row\">\n        <Favourites\n          favourites={favourites}\n          onDeleteFavourite={onDeleteFavourite}\n          onDeleteAllFavourites={onDeleteAllFavourites}\n          onPictureDetails={onPictureDetails}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","interface GET_PICTURE {\n  type: 'GET_ASYNC_DATA',\n  payload: any\n}\n\ninterface GET_PICTURE_SUCCESS {\n  type: 'FETCH_PICTURE_DATA_SUCCESS',\n  payload: any\n}\n\ninterface GET_PICTURE_START {\n  type: 'FETCH_PICTURE_DATA_START',\n}\n\ninterface GET_PICTURE_FAILURE {\n  type: 'FETCH_PICTURE_DATA_FAILURE',\n  payload: any\n}\n\nexport const getPicture = (payload: any): GET_PICTURE => {\n  return {\n    type: \"GET_ASYNC_DATA\",\n    payload: payload,\n  }\n};\n\nexport const getPictureStart = (): GET_PICTURE_START => {\n  return {\n    type: \"FETCH_PICTURE_DATA_START\",\n  }\n};\n\nexport const getPictureSuccess = (payload: any): GET_PICTURE_SUCCESS => {\n  return {\n    type: \"FETCH_PICTURE_DATA_SUCCESS\",\n    payload: payload,\n  }\n};\n\nexport const getPictureFailure = (payload: any): GET_PICTURE_FAILURE => {\n  return {\n    type: \"FETCH_PICTURE_DATA_FAILURE\",\n    payload: payload,\n  }\n};\n\nexport type pictureActions = GET_PICTURE | GET_PICTURE_SUCCESS | GET_PICTURE_FAILURE | GET_PICTURE_START;\n","import React from 'react';\nimport Main from './views/Main';\n\nconst App = () => {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { pictureActions } from \"../actions/picture\";\n\ninterface Picture {\n  date: string,\n  explanation: string,\n  title: string,\n  url: string,\n}\n\ninterface initialPictureState {\n  isLoading: boolean,\n  error: string | null,\n  picture: Picture,\n}\n\nconst initialState: initialPictureState = {\n  isLoading: false,\n  error: null,\n  picture: {} as Picture,\n}\n\nconst pictureReducer = (state = initialState, action: pictureActions): initialPictureState => {\n  switch (action.type) {\n    case \"FETCH_PICTURE_DATA_SUCCESS\":\n      return {\n        ...state,\n        isLoading: false,\n        error: null,\n        picture: { ...action.payload },\n      };\n    case \"FETCH_PICTURE_DATA_START\":\n      return {\n        ...state,\n        error: null,\n        isLoading: true,\n        picture: {} as Picture,\n      };\n    case \"FETCH_PICTURE_DATA_FAILURE\":\n      return {\n        ...state,\n        isLoading: false,\n        picture: {} as Picture,\n        error:  action.payload,\n      };\n    default:\n      return state;\n  }\n}\n\nexport default pictureReducer;\n","import { put, takeLatest, call } from \"redux-saga/effects\";\nimport axios from 'axios';\n\nconst fetchPictures = async (url: string) => {\n  const data = await axios.get(url);\n  return data.data;\n}\n\nexport const getPicturesAsync = function* ({payload}: any) {\n  try {\n    yield put({type: \"FETCH_PICTURE_DATA_START\" });\n    const url = `https://api.nasa.gov/planetary/apod?api_key=${process.env.REACT_APP_NASA_API_KEY}&date=${payload.apiDate}`;\n    const data = yield call(fetchPictures, url);\n    yield put({type: \"FETCH_PICTURE_DATA_SUCCESS\", payload: data});\n  } catch (error) {\n    yield put({type: \"FETCH_PICTURE_DATA_FAILURE\", payload: error});\n  }\n};\n\nexport const getPicturesWatcher = function*() {\n  yield takeLatest(\"GET_ASYNC_DATA\", getPicturesAsync);\n}\n","import { all, fork } from 'redux-saga/effects';\nimport { getPicturesWatcher } from './picture';\n\nexport default function* rootSaga () {\n  yield all([\n    fork(getPicturesWatcher),\n  ]);\n}\n","import {createStore, applyMiddleware, combineReducers} from \"redux\";\nimport createSagaMiddleware from 'redux-saga';\nimport pictureReducer from \"./reducers/picture\";\nimport rootSaga from \"./actions/sagas\";\n\n// Middleware: Redux Saga\nconst rootReducer = combineReducers({\n  picture: pictureReducer,\n})\nconst sagaMiddleware = createSagaMiddleware();\n\nexport const store = createStore(\n  rootReducer,\n  applyMiddleware(sagaMiddleware)\n);\n\nsagaMiddleware.run(rootSaga)\n\nexport default store;\nexport type ROOT_STATE = ReturnType<typeof rootReducer>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}